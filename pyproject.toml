[project]
name = "a2a-currency-reporting"
version = "0.1.0"
description = "A modular agent-to-agent (A2A) architecture for intelligent automation using the A2A protocol"
authors = [
    {name = "Bhanu Singh", email = "bhanu.pratap@outlook.com"}
]
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
keywords = ["a2a", "agents", "currency", "reporting", "langgraph", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # A2A Protocol and Core Framework
    "a2a-sdk==0.2.8",
    "click>=8.1.8",
    
    # Web Framework and HTTP
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.34.2",
    "httpx>=0.28.1",
    
    # LangChain and AI
    "langchain-google-genai>=2.0.10",
    "langgraph>=0.3.18",
    "langchain-openai>=0.1.0",
    "langchain-core>=0.3.0",
    
    # Data and Validation
    "pydantic>=2.10.6",
    "python-dotenv>=1.1.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.28.1",  # For testing HTTP clients
    
    # Code Quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    
    # Development Tools
    "pre-commit>=3.0.0",
    "jupyter>=1.0.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.28.1",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=1.0.0",
]

[project.scripts]
currency-agent = "currency_agent.__main__:main"
reporting-agent = "reporting_agent.__main__:main"

[project.urls]
Homepage = "https://github.com/bhanu-singh/googlea2a-demo"
Repository = "https://github.com/bhanu-singh/googlea2a-demo"
Issues = "https://github.com/bhanu-singh/googlea2a-demo/issues"
Documentation = "https://github.com/bhanu-singh/googlea2a-demo#readme"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["currency_agent", "reporting_agent"]

[tool.uv]
dev-dependencies = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    
    # Code Quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    
    # Development Tools
    "pre-commit>=3.0.0",
    "jupyter>=1.0.0",
]

[tool.uv.sources]
# Use the latest stable versions from PyPI
# Add any specific source requirements here if needed

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["currency_agent", "reporting_agent"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "a2a.*",
    "langchain.*",
    "langgraph.*",
    "google.generativeai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "test",
    "currency_agent",
    "reporting_agent",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["currency_agent", "reporting_agent"]
omit = [
    "*/test*",
    "*/.*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
] 